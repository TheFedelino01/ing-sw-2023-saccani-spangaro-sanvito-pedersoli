@startuml
!pragma layout elk

skinparam linetype ortho
CardHandler <-- Game : utilizza
Player o-- Game: composto
PlayGround <-- Game: su gioca su
Shelf <-- Player: possiede
SpacePlayGround <-- PlayGround : composto da tanti


Tile<--Shelf : viene riempito da tante
Tile <-- SpacePlayGround : ha sopra
Tile<--Player: ha in mano 3


Tile<-- PlayGround : dispone di 
CardGoal<--Player: possiede una 
Point<--Player: colleziona
Card o-- CardHandler: gestisce
Card<-CardHandler: dispone di
Point<--CardGoal: permette di ottenere
Point<--CardCommon: permette di ottenere

MainController <-- ServerMainSocket : chiede informazioni a 
GameController <-- MainController: gestisce
Game<-- GameController: gestisce
GameController <-- SocketClient: fa riferimento
Player <-- SocketClient: rappresenta
'-----------------------------------
'INTERFACCE
'-----------------------------------
interface verifyCommonStrategy{
+boolean verify(Shelf shelfToCheck);
}
note top of verifyCommonStrategy
Per implementare il Strategy Pattern di controllo soddisfazione Obiettivo per carte comuni

+boolean verify(Shelf shelfToCheck); 'Fa diversi cicli sullo Shelf e controlla che viene soddisfatto un obiettivo common
end note



interface verifyGoalStrategy{
+Point verify(Shelf shelfToCheck);
}

note top of verifyGoalStrategy
Per implementare il Strategy Pattern di controllo soddisfazione Obiettivo per carte goal

+Point verify(Shelf shelfToCheck); 'Fa diversi cicli sullo Shelf e controlla che viene soddisfatto un obiettivo goal
end note


interface Card{
+String name;
}

interface clientGameListener{
+void gameStarted();
+void itsTurnOf(Player p);
+void gameEnded();
}
note top of clientGameListener
Per implementare l'Observer Pattern, la view osserva il Model
end note

'-----------------------------------
'CLASSI
'-----------------------------------
class SpacePlayGround {
-Integer requiredPlayerstoBeFilled;
-Tile tile;
}


note top of Tile 
-boolean freeSide; 'se ha un lato libero (fast algorithm)
-Integer available; 'default 22
+getColor(); 'return color
+getName(); 'return name
end note

abstract Tile{
-String color;
-String name;
-boolean freeSide;
-Integer available;

+getColor();
+getName();
+setFreeSide(); 
}



class Cat extends Tile{
}
class Book extends Tile{
}
class Activity extends Tile{
}
class Frame extends Tile{
}
class Trophy extends Tile{
}
class Plant extends Tile{
}



abstract PlayGround {
-SpacePlayGround[][]
-List<Tile> tileAvailable;


+setSpacePlayGroundLayout();
+fill();
+void addPlayableTile(Tile o);
+void removePlayableTile(Tile o);
}

note top of PlayGround 
+fill(); 'mette le tile scegliendole in modo randomico da tileAvailable basandosi sulla disponibilita' di ogni tale
end note

class PlayGround_2players extends PlayGround {
+setSpacePlayGroundLayout(); '@override
+fill(); '@override
}
class PlayGround_3players extends PlayGround {
+setSpacePlayGroundLayout(); '@override
+fill(); '@override
}
class PlayGround_4players extends PlayGround {
+setSpacePlayGroundLayout(); '@override
+fill(); '@override
}


class Shelf {
-Tile[7][6] shelf
}




abstract Point {
-Integer point;
-boolean isFinal;
}


note top of Player  
-List<Tile> inHandTail; 'le tail che il giocatore ha in mano e deve decidere dove metterle nella shelf
-Map<Integer,List<Point>> obtainedPoints; 'Integer si riferisce al numero della carta comune (1 o 2) a cui corrisponde il Point
+Point getPointOfSecretGoal(); 'invoca il metodo verify su secretGoal passandogli la sua shelf
end note

class Player{
-String nickname
-Shelf shelf;
-CardGoal secretGoal
-List<Tile> inHandTail; 
-Map<Integer,Point> obtainedPoints;

+String getNickname();
+void positionTail(int col, String name);
+Point getPointOfSecretGoal();
}

note top of Game
+void extractCommondCards(); 'istanzia cardHandler di tipo CardCommonHandler ed estrae le carte comuni
+void extractGoalCards(); 'istanzia cardHandler di tipo CardGoalHandler ed estrae le carte goal personali
+CardGoal getGoalCardofPlayer(String nickname); 'restituisce la carta goal del giocatore (mapping players e cardGoalHandler)
end note

class Game{
-List<Player> players; 'da 2 a 4
-CardHandler cardCommonHandler, cardGoalHandler;
-Integer gameId;
-PlayGround pg;
-Integer currentPlaying;
-List<clientGameListener> clientObserver;

+void extractCommondCards();
+void extractGoalCards();
+CardGoal getGoalCardofPlayer(String nickname);
+void fill();
+List<Tile> grabTail(int startingPosX,int startingPosY, int endingPosX, int endingPosY); 
+void positionTail(int col, String name);
+void checkCardsCommon(); 
+void nextPlayer();
+void checkCardsGoal();
+void endGame();

+void addClientObserver(clientGameListener cgl);
+void removeClientObserver(clientGameListener cgl);
}




note top of CardHandler
Pattern di tipo Factory Method

-Map<Card,boolean> allCardPlayable; 'Popolata dal costruttore con ogni sottoclasse di Card e il boolean a false (tutti disponibili ad essere scelti)
+void deliverCard(int num); 'si occupa di prendere num Card e di metterle dentro alla lista cards (no doppioni) invoca selectRandomCard
end note

abstract CardHandler{
-List<Card> cards; 
-Map<Card,boolean> allCardPlayable;

+void deliverCard(int num);
-abstract Card selectRandomCard();

+void addPlayableCard(Card o);
+void removePlayableCard(Card o);

+List<Card> getCards();
}



class CardGoalHandler extends CardHandler{
-Card selectRandomCard();
}

note top of CardGoalHandler 
-Card selectRandomCard(); @Override 'restituisce carta di tipo goal in modo randomico (con controllo su allCardPlayable)
end note

class CardCommonHandler extends CardHandler{
-Card selectRandomCard(); 
}

note top of CardCommonHandler 
-Card selectRandomCard(); @Override 'restituisce carta di tipo common in modo randomico (con controllo su allCardPlayable)
end note


abstract CardGoal implements Card, verifyGoalStrategy{
-Map<Integer, Point> points;
+Point verify(Shelf shelfToCheck);
}

'Definisce la strategia di verifica della Shelf
class goal1 extends CardGoal{
+Point verify(Shelf shelfToCheck); '@override il point viene resituito a seconda della map points
}
' ......
class goal8 extends CardGoal{
+Point verify(Shelf shelfToCheck); '@override
}


note top of CardCommon 
-Queue<Point> points; 'i giocatori prendono i punti a seconda di quando completano l'obiettivo (chi lo completa per primo prende 8 punti, il secondo 6 punti etc.)
end note

abstract CardCommon implements Card, verifyCommonStrategy{
-Queue<Point> points;


+Point popPoint();
+void setpointType(Point type);
+boolean verify(Shelf shelfToCheck);
}

'Definisce la strategia di verifica della Shelf
class common1 extends CardCommon {
+boolean verify(Shelf shelfToCheck); '@override
}
' ......
class common12 extends CardCommon {
+boolean verify(Shelf shelfToCheck); '@override
}



class ServerMainSocket extends Thread{
-SocketServer sc;
-int port;
-MainController mainc;

+void init(int port);
+void run(); 

}
note top of ServerMainSocket 
E' il server socket che accoglie i nuovi giocatori, capisce le info di base
in particolare se vuole joinare o creare un game.
Successivamente, crea il SocketClient passandogli il gameController giusto
(giusto: uno già esistente se vuole joinare, uno nuovo se vuole creare)

+void init(int port); 'si avvia in attesa di connessioni socket
end note


class SocketClient extends Thread implements clientGameListener{
-Socket sclient;
-GameController gameController;
-Player player;

+SocketClient(Player p, GameController gc);
+void run(); 'gestisce le richieste del client 

'metodi dell'interface clientGameListener (andrà a notificare il client dell'evento)
}
note top of SocketClient 
In questo momento il client è gia associato ad una partita, perciò il SocketClient
gestisce tutti i comandi che possono essere inviati durante una partita 
invocando metodi sul gameController
All'inizio il SocketClient si registra come osservatore del game così da essere
notificato di ogni evento che succeda sul Model
end note


class MainController{
-List<GameController> awaitingGames;
-List<GameController> runningGames;

+GameController createNewGame();
+GameController joinFirstAvailableGame();
+GameController joinGame(Integer idGameToJoin);
}
note top of MainController 
E' il controller di tutte le partite 
permette di creare una partita o di entrarci.
Il MainController viene usato dal ServerMainSocket per far creare o joinare i vari client
end note


class GameController{
-Game game;

+void addClientObserver(clientGameListener c);
+void removeClientObserver(clientGameListener c);
+void addPlayer(Player p);
+void start();
+List<Tile> grabTail(Player p, int startingPosX,int startingPosY, int endingPosX, int endingPosY);
+void positionTail(Player p, int col, String name);

-void extractCommondCards();
-void extractGoalCards();
-void fill();
-void checkCardsCommon(); 
-void nextPlayer();
-void checkCardsGoal();
-void end();
}

note top of GameController 
Crea il game e Gestisce tutto un game con le azioni che i vari giocatori possono compiere
la classe viene utilizzata dai vari SocketClient 
end note
@enduml
